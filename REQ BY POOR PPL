local vU = game:GetService("VirtualUser")
local plr = game:GetService("Players").LocalPlayer
local osclock_ = os.clock()
repeat wait(1) until game:IsLoaded()
print("win root")

local MP = { HP = 15000000, TP = 950000000, EP = 350000, EP = 4000000, CM = 30000000, BA = 2 }
local IPS99 = { ["TCP"] = 5000000, ["XCP"] = 60000, ["NY"] = 10000, ["SWT"] = 3000, ["BSV"] = 150000, ["CV"] = 500000, ["CK"] = 5000, ["CKLH"] = 500, ["CKUH"] = 5000 }
local PS99 = { ["TC"] = 100000, ["SF"] = 1500, ["RF"] = 500, ["ETF"] = 20000 }
local EP99 = { ["F"] = 100, ["LB"] = 100000, ["SH"] = 100000, ["HH"] = 1000000, ["DCM"] = 15000000, ["MC"] = 3000000, ["PT"] = 10000 }
local CP99 = { ["O"] = 1000000, ["R"] = 6000000, ["G"] = 25000 }
local U5 = { ["MT"] = 5000000, ["MS"] = 1000, ["MC"] = 5000, ["DSV"] = 100000, ["MO"] = 100000, ["CB"] = 1000000, ["SK"] = 40000, ["SKLH"] = 500, ["SKUH"] = 20000 }

wait(10)
game:GetService("RunService"):Set3dRenderingEnabled(false)
local BB = game:GetService("ReplicatedStorage").Network:WaitForChild("Booths_Broadcast")
local P = game:GetService('Players')
local gP = P:GetPlayers()
local PiS = #gP
local HTTP = game:GetService("HttpService")
local l = require(game.ReplicatedStorage:WaitForChild('Library'))

plr.Idled:connect(function()
    vU:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    wait(1)
    vU:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
game.Players.LocalPlayer.PlayerScripts.Scripts.Core["Idle Tracking"].Disabled = true

wait(15)
game.Players.LocalPlayer.PlayerScripts.Scripts.Core["Idle Tracking"].Enabled = false
game:GetService("RunService"):Set3dRenderingEnabled(false)
local BB = game:GetService("ReplicatedStorage").Network:WaitForChild("Booths_Broadcast")
local P = game:GetService('Players')
local gP = P:GetPlayers()
local PiS = #gP
local HTTP = game:GetService("HttpService")
local TS = game:GetService("TeleportService")
local RS = game:GetService("ReplicatedStorage")
local sn, s
local l = require(RS:WaitForChild("Library"))

if sn == nil then sn = false end

plr.Idled:connect(function()
   vU:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
   wait(1)
   vU:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

local function pLI(uid, g, item, ver, sh, a, bF, bS, c, fM, sn)
    local gA = plr.leaderstats["ðŸ’Ž Diamonds"].Value
    local snM ="||".. plr.Name .. "||"
    local w, wc, wc, wS
    local vV = { [1] = "Golden ", [2] = "Rainbow " }
    local vS = vV[ver] or (ver == nil and "")
    local m = ( c == "Pet" and (l.Directory.Pets[item].huge or l.Directory.Pets[item].titanic)) and "<@" .. userid .. ">" or ""
    
    if bS then
    wc = tonumber(0x00ff00)
        snM = snM .. " just sniped ".. a .."x "
        wc = m
    wS = "Success!"
    w = webhook
    if sn == true then
        w = normalwebhook
        sn = false
    end
    else
    wc = tonumber(0xff0000)
    w = webhookFail
    wS = fM
    snM = snM .. " failed to snipe ".. a .."x "
    if sn == true then
        sn = false
    end
    end
    
    snM = snM .. "**" .. vS
    
    if sh then
        snM = snM .. " Shiny "
    end
    
    snM = snM .. item .. "**"
    
local m1 = {
        ['content'] = wc,
        ['embeds'] = {
            {
        ["author"] = {
            ["name"] = "Boor Sniper ðŸŒš",
            ["icon_url"] = "https://cdn.discordapp.com/attachments/1099614606994964581/1215231187811831848/OIP.jfif?ex=65fbff3d&is=65e98a3d&hm=cd8a933f5477e09f03327957880a7819844127955254f7e93057e31aea83c1fd&",
        },
                ['title'] = snM,
                ["color"] = wc,
                ["timestamp"] = DateTime.now():ToIsoDate(),
                ['fields'] = {
                    {
                        ['name'] = "__Price:__",
                        ['value'] = g .. " ðŸ’Ž",
                    },
                    {
                        ['name'] = "__Bought from:__",
                        ['value'] = "||"..tostring(bF).."||",
                    },
                    {
                        ['name'] = "__Amount:__",
                        ['value'] = a .. "x",
                    },
                    {
                        ['name'] = "__Remaining gems:__",
                        ['value'] = gA .. " ðŸ’Ž",
                    },      
                    {
                        ['name'] = "__PetID:__",
                        ['value'] = "||"..tostring(uid).."||",
                    },
            {
                        ['name'] = "__Status:__",
                        ['value'] = wS,
                    },
            {
                        ['name'] = "__Ping:__",
                        ['value'] = math.round(plr:GetNetworkPing() * 2000) .. "ms",
                    }
                },
        ["footer"] = {
                        ["icon_url"] = "https://cdn.discordapp.com/attachments/1099614606994964581/1215231187811831848/OIP.jfif
?ex=65fbff3d&is=65e98a3d&hm=cd8a933f5477e09f03327957880a7819844127955254f7e93057e31aea83c1fd&", -- optional
                        ["text"] = "Since yall requesting :)"
		}
            },
        }
    }

    local jsonMessage = http:JSONEncode(message1)
    local success, webMessage = pcall(function()
	http:PostAsync(weburl, jsonMessage)
    end)
    if success == false then
        local response = request({
            Url = weburl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonMessage
        })
    end
end


local function tryPurchase(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
    local args = {
        [1] = playerid, --sellers roblox id
        [2] = {
            [tostring(uid)] = amount --id of the item and the amount
        }
    }
    local ping = Player:GetNetworkPing()
    if buytimestamp > listTimestamp then
        task.wait(3.4 - ping)
    end
    local boughtPet, boughtMessage = game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_RequestPurchase"):InvokeServer(unpack(args))
    processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, class, boughtMessage, math.floor(ping*1000))
end

Booths_Broadcast.OnClientEvent:Connect(function(username, message)
    if type(message) == "table" then
        local highestTimestamp = -math.huge
        local key, listing
        for v, value in pairs(message["Listings"] or {}) do
            if type(value) == "table" and value["ItemData"] and value["ItemData"]["data"] then
                local timestamp = value["Timestamp"]
                if timestamp > highestTimestamp then
                    highestTimestamp = timestamp
                    key = v
                    listing = value
                end
            end
        end
        if listing then
            local buytimestamp, listTimestamp = listing["ReadyTimestamp"], listing["Timestamp"]
            local data, playerid = listing["ItemData"]["data"], message['PlayerID']
            local gems, uid = tonumber(listing["DiamondCost"]), key
            local item, version, shiny = data["id"], data["pt"], data["sh"]
            local amount = tonumber(data["_am"]) or 1
            local class, unitGems = tostring(listing["ItemData"]["class"]), gems / amount

            print(string.format("%s listed %s %s - %s gems, %s gems/unit", tostring(username), tostring(amount), tostring(item), tostring(gems), tostring(unitGems)))

            if string.find(item, "Huge") and gems <= 100 then
                coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                return
            elseif class == "Pet" then
                local type = Library.Directory.Pets[item]
                if type.exclusiveLevel and gems <= MainPrices.ExclusivePetPrice and item ~= "Banana" and item ~= "Coin" then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                elseif type.titanic and gems <= MainPrices.TitanicPetPrice then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                elseif type.huge and gems <= MainPrices.HugePrice then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                end
            elseif class == "Egg" and gems <= MainPrices.EggPrice then
                coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                return
            elseif ((string.find(item, "Key") and not string.find(item, "Lower")) or string.find(item, "Ticket") or string.find(item, "Charm") or class == "Charm") and gems <= 200 then
                coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                return
            elseif class == "Enchant" then
                if string.find(item, "Chest Mimic") and gems <= MainPrices.ChestMimic then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                end
                -- elseif gems <= MainPrices.buyAnything then
                --     coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                --     return
            end

            for i, v in pairs(ItemsPS99) do
				if item == i and gems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

            for i, v in pairs(PotionsPS99) do
				if item == i and gems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end
			

			for i, v in pairs(EnchantsPS99) do
				if item == i and gems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

			for i, v in pairs(CharmsPS99) do
				if item == i and gems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

			for i, v in pairs(Update5) do
				if item == i and gems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end



        end
    end
end)

local function serverHop(id)
    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local Players = game:GetService("Players")
    local sfUrl = "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s&excludeFullGames=true"
    local req = request({
        Url = string.format(sfUrl, id, "Desc", 100)
    })
    local body = HttpService:JSONDecode(req.Body)
    task.wait(0.2)
    local servers = {}
    if body and body.data then
        for i, v in next, body.data do
            if type(v) == "table" and v.playing >= 2 and v.id ~= game.JobId then
                table.insert(servers, 1, v.id)
            end
        end
    end
    local randomCount = #servers
    if not randomCount then
        randomCount = 2
    end
    TeleportService:TeleportToPlaceInstance(id, servers[math.random(1, randomCount)], Players.LocalPlayer)
end

if PlayerInServer < 25 then
    while task.wait(1) do
        serverHop(place)
    end
end

for i = 1, PlayerInServer do
    for _, alt in pairs(alts) do
        if getPlayers[i].Name == alt and alt ~= Players.LocalPlayer.Name then
            task.wait(math.random(0, 300))
            while task.wait(1) do
                serverHop(place)
            end
        end
    end
end

task.spawn(function()
    game:GetService("GuiService").ErrorMessageChanged:Connect(function()
        game.Players.LocalPlayer:Kick("Found An Error, Reconnecting...")
        serverHop(place)
        wait(0.1)
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    getPlayers = Players:GetPlayers()
    PlayerInServer = #getPlayers
    if PlayerInServer < 25 then
        while task.wait(1) do
            serverHop(place)
        end
    end
end)

local hopDelay = math.random(1000, 1500)

task.spawn(function ()
    while task.wait(1) do
        if math.floor(os.clock() - osclock) >= hopDelay then
            while task.wait(1) do
                serverHop(place)
            end
        end
    end
end)
