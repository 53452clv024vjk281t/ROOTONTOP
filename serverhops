local desiredVersion = "1689"
local PlaceId = game.PlaceId

-- SERVICES
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

-- Clipboard compatibility
local setclipboard = setclipboard or toclipboard or (Clipboard and Clipboard.set)

-- Wait until game is fully loaded before continuing
repeat
    task.wait(0.1)
until game:IsLoaded()

-- Wait extra 5 seconds before continuing
task.wait(5)

-- UI SETUP
local function createLoadingUI()
    local gui = Instance.new("ScreenGui")
    gui.Name = "ServerHopUI"
    gui.ResetOnSpawn = false
    gui.Parent = Player:WaitForChild("PlayerGui")

    local bg = Instance.new("Frame")
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    bg.BackgroundTransparency = 0.3
    bg.Parent = gui

    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "StatusLabel"
    statusLabel.Size = UDim2.new(1, 0, 0, 60)
    statusLabel.Position = UDim2.new(0, 0, 0.4, 0)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "üîÑ Loading..."
    statusLabel.Font = Enum.Font.SourceSansBold
    statusLabel.TextSize = 32
    statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusLabel.TextStrokeTransparency = 0.5
    statusLabel.Parent = bg

    local versionLabel = Instance.new("TextLabel")
    versionLabel.Name = "VersionLabel"
    versionLabel.Size = UDim2.new(1, 0, 0, 40)
    versionLabel.Position = UDim2.new(0, 0, 0.45, 0)
    versionLabel.BackgroundTransparency = 1
    versionLabel.Text = "Checking for version: " .. desiredVersion
    versionLabel.Font = Enum.Font.SourceSans
    versionLabel.TextSize = 24
    versionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    versionLabel.TextStrokeTransparency = 0.5
    versionLabel.Parent = bg

    local creditsLabel = Instance.new("TextLabel")
    creditsLabel.Name = "CreditsLabel"
    creditsLabel.Size = UDim2.new(1, 0, 0, 40)
    creditsLabel.Position = UDim2.new(0, 0, 0.9, 0)
    creditsLabel.BackgroundTransparency = 1
    creditsLabel.Text = "Credits: mimicccccc1#2347"
    creditsLabel.Font = Enum.Font.SourceSansItalic
    creditsLabel.TextSize = 24
    creditsLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    creditsLabel.TextStrokeTransparency = 0.7
    creditsLabel.Parent = bg

    return statusLabel, versionLabel
end

local statusLabel, versionLabel = createLoadingUI()

-- FUNCTION: Get actual version string from game UI
local function getActualVersion()
    for _, obj in ipairs(game:GetDescendants()) do
        if obj:IsA("TextLabel") then
            local text = obj.Text
            local version = string.match(text, "^v(%d+)$")
            if version then
                return version
            end
        end
    end
    return nil
end

-- FUNCTION: Check if actual version matches desired
local function hasCorrectVersion()
    local actualVersion = getActualVersion()
    if actualVersion then
        versionLabel.Text = "Current version: v" .. actualVersion
    else
        versionLabel.Text = "Current version: unknown"
    end
    return actualVersion == desiredVersion
end

-- FUNCTION: Copy Job ID to clipboard
local function copyJobId()
    if setclipboard then
        setclipboard(game.JobId)
        print("[‚úì] Job ID copied: " .. game.JobId)
    else
        warn("Clipboard function not supported.")
    end
end

-- FUNCTION: Server hop to a random public server
local function tryServerHop()
    local servers = {}
    local cursor = nil

    repeat
        local url = "https://games.roblox.com/v1/games/"..PlaceId.."/servers/Public?sortOrder=Asc&limit=100"
        if cursor then
            url = url .. "&cursor=" .. cursor
        end

        local success, response = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)

        if success and response and response.data then
            for _, server in pairs(response.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(servers, server.id)
                end
            end
            cursor = response.nextPageCursor
        else
            warn("-- Failed to get server list.")
            return false
        end
    until not cursor or #servers >= 1

    if #servers > 0 then
        local randomServerId = servers[math.random(1, #servers)]
        statusLabel.Text = "üîÅ Hopping to new server..."
        TeleportService:TeleportToPlaceInstance(PlaceId, randomServerId, Player)
        return true
    else
        warn("-- No servers found to hop.")
        return false
    end
end

-- MAIN LOOP
task.spawn(function()
    while true do
        if hasCorrectVersion() then
            statusLabel.Text = "‚úÖ Correct version found: " .. desiredVersion
            print("[‚úì] Correct version found.")
            copyJobId()
            break
        else
            statusLabel.Text = "‚ùå Version not found. Searching..."
            local hopped = tryServerHop()
            if hopped then
                break -- stop loop once teleport starts
            else
                task.wait(3) -- wait before retrying if teleport failed
            end
        end
        task.wait(1)
    end
end)
